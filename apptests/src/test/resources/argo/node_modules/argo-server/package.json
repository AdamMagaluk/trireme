{
  "name": "argo-server",
  "version": "0.1.4",
  "description": "An extensible, asynchronous HTTP reverse proxy and origin server.",
  "main": "argo.js",
  "directories": {
    "example": "example"
  },
  "license": "MIT",
  "scripts": {
    "test": "node_modules/.bin/mocha -R spec",
    "coverage": "bin/_coverage"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/argo/argo.git"
  },
  "author": {
    "name": "Kevin Swiber",
    "email": "kswiber@gmail.com"
  },
  "readmeFilename": "README.md",
  "devDependencies": {
    "mocha": "~1.8.1"
  },
  "contributors": [
    {
      "name": "Kevin Swiber",
      "email": "kswiber@gmail.com"
    },
    {
      "name": "Matthew Dobson",
      "email": "mdobson4@gmail.com"
    }
  ],
  "readme": "# Argo\n\nAn extensible, asynchronous HTTP reverse proxy and origin server.\n\n<!-- Argo is:\n\n* An API-focused HTTP server.\n* A reverse proxy to manage and modify HTTP requests and responses.\n* Modular using handlers for request and response pipelines.\n* Extensible using a package system.\n\nAs an API server:\n\n* Route requests to handlers.\n* Separate resources into modules.\n\nAs a reverse proxy:\n\n* Route requests to backend servers.\n* Transform HTTP messages on the fly.\n* Add OAuth 2.0 support to an existing API.\n* Create a RESTful API faÃ§ade over legacy systems.\n-->\n\n## Examples\n\n### Adding Cross-Origin Resource Sharing\n\nSetup the server:\n\n```javascript\nvar argo = require('argo-server');\n\nargo()\n  .use(function(addHandler) {\n    addHandler('response', function(env, next) {\n      env.response.setHeader('Access-Control-Allow-Origin', '*');\n      next(env);\n    });\n  })\n  .target('http://weather.yahooapis.com')\n  .listen(1337);\n```\n\nMake a request:\n\n```bash\n$ curl -i http://localhost:1337/forecastrss?w=2467861\n\nHTTP/1.1 200 OK\nDate: Thu, 28 Feb 2013 20:55:03 GMT\nContent-Type: text/xml;charset=UTF-8\nConnection: keep-alive\nServer: YTS/1.20.13\nAccess-Control-Allow-Origin: *\nContent-Length: 2337\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>\n<GiantXMLResponse/>\n```\n\n### Serving an API Response \n\nSetup the server: \n\n```javascript\nvar argo = require('argo-server');\n\nargo()\n  .get('/dogs', function(addHandler) {\n    addHandler('request', function(env, next) {\n      env.response.statusCode = 200;\n      env.response.body = { dogs: ['Alfred', 'Rover', 'Dino'] };\n      next(env);\n    });\n  })\n  .listen(1337);\n```\n\nMake a request:\n\n```bash\n$ curl -i http://localhost:1337/dogs\n\nHTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: 34 \nDate: Thu, 28 Feb 2013 20:44:46 GMT\nConnection: keep-alive\n\n{\"dogs\":[\"Alfred\",\"Rover\",\"Dino\"]}\n```\n\n## Install\n\n```bash\n$ npm install argo-server\n```\n\n## Usage\n\n### use(addHandlerFunction)\n\nParameters:\n\n`addHandler` has the signature `addHandler(type, [options], handler)`. The `addHandlerFunction` is used to set up request and response handlers.  \n\n#### `addHandler` Parameters:\n\n`type`: `'request'` or `'response'`\n\n`options`: Mostly used for internal purposes.  Optional.\n\n`handler`: A request or response handler.  `handler` has the signature `handler(env, next)`.\n\n#### `handler` Parameters:\n\n`env` is an environment context that is passed to every handler.\n\n`next` is a reference to the next function in the pipeline.\n\nWhen the handler is complete and wishes to pass to the next function in the pipeline, it must call `next(env)`.\n\nIt's implemented like so:\n\n```javascript\nargo()\n  .use(function(addHandler) {\n    addHandler('request', function(env, next) {\n      env.request.headers['X-Custom-Header'] = 'Yippee!';\n      next(env);\n    });\n  })\n```\n\n### use(package)\n\nAlias for `include(package)`.\n\n### target(uri)\n\n`target` is used for proxying requests to a backend server.\n\nParameters:\n\n`uri`: a string pointing to the target URI.\n\nExample:\n\n```javascript\nargo()\n  .target('http://weather.yahooapis.com')\n```\n\n### route(path, [options], addHandlerFunction)\n\nParameters:\n\n`path`: a string used to match HTTP Request URI path.\n\n`options`: an object with a `methods` property to filter HTTP methods (e.g., `{ methods: ['GET','POST'] }`).  Optional.\n\n`addHandlerFunction`: Same as in `use`.\n\nExample:\n\n```javascript\nargo()\n  .route('/greeting', function(addHandler) {\n    addHandler('request', function(env, next) {\n      env.response.statusCode = 200;\n      env.response.headers = { 'Content-Type': 'text/plain' };\n      env.response.body = 'Hello World!';\n \n      next(env);\n    });\n  })\n```\n\n### get(path, addHandlerFunction)\n### post(path, addHandlerFunction)\n### put(path, addHandlerFunction)\n### del(path, addHandlerFunction)\n### options(path, addHandlerFunction)\n### trace(path, addHandlerFunction)\n\nMethod filters built on top of `route`.\n\nExample:\n\n```javascript\nargo()\n  .get('/puppies', function(addHandler) {\n    addHandler('request', function(env, next) {\n      env.response.body = JSON.stringify([{name: 'Sparky', breed: 'Fox Terrier' }]);\n      next(env);\n    });\n  })\n```\n\n### map(path, [options], argoSegmentFunction)\n\n`map` is used to delegate control to sub-Argo instances based on a request URI path.\n\nParameters:\n\n`path`: a string used to match the HTTP Request URI path.\n\n`options`: an object with a `methods` property to filter HTTP methods (e.g., `{ methods: ['GET','POST'] }`).  Optional.\n\n`argoSegmentFunction`: a function that is passed an instance of `argo` for additional setup.\n\nExample:\n\n```javascript\nargo()\n  .map('/payments', function(server) {\n    server\n      .use(oauth)\n      .target('http://backend_payment_server');\n  })\n```\n\n### include(package)\n\nParameters:\n\n`package`: An object that contains a `package` property.\n\nThe `package` property is a function that takes an argo instance as a paramter and returns an object that contains a `name` and an `install` function.\n\nExample:\n\n```javascript\nvar superPackage = function(argo) {\n  return {\n    name: 'Super Package',\n    install: function() {\n      argo\n        .use(oauth)\n        .route('/super', require('./super'));\n    }\n  };\n};\n\nargo()\n  .include(superPackage)\n```\n\n### listen(port)\n\nParameters:\n\n`port`: A port on which the server should listen.\n\n## Tests\n\nUnit tests: \n\n```bash\n$ npm test\n```\n\nTest Coverage:\n\n```bash\n$ npm run-script coverage\n```\n\n## On the Roadmap\n\n* HTTP Caching Support\n* Collapsed Forwarding\n* Parameterized Routing\n* Rate Limiting\n\n## License\nMIT\n",
  "_id": "argo-server@0.1.4",
  "dist": {
    "shasum": "4264d5572fa9b8f6fff6ca4db00090d162346dea"
  },
  "_from": "argo-server@x",
  "_resolved": "https://registry.npmjs.org/argo-server/-/argo-server-0.1.4.tgz"
}
